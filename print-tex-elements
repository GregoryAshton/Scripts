#!/usr/bin/python

"""

CLT to print labels and figure names in a latex document

"""

import argparse
from termcolor import colored
import glob
from collections import Counter
import fnmatch
import os


def get_files_recursively():
    files = []
    for root, dirnames, filenames in os.walk('.'):
        for filename in fnmatch.filter(filenames, '*.tex'):
            files.append(os.path.join(root, filename))
    return files


def get_line_number(string, lines):
    split_lines = lines.split("\n")
    bools = [string in l for l in split_lines]
    idxs = [i for i, l in enumerate(split_lines) if string in l]
    return str(idxs[0]).ljust(5)


def print_elements(lines, file, splitter, alphabetic=False, containing="",
                   repeated_elements=""):
    parts = lines.split(splitter)
    elements = []
    for p in parts[1:]:
        elements.append(p[1+p.find("{"): p.find("}")])
    if alphabetic:
        elements = sorted(elements, key=lambda s: s.lower())

    count_of_repeated_elements = Counter(elements)
    if repeated_elements == "remove":
        elements = count_of_repeated_elements.keys()

    header = "Printing {} elements in: {}".format(splitter, file)
    print(colored(header, "red"))
    for f in elements:
        if containing in [None, "all"] or containing in f:
            repeated_definition = count_of_repeated_elements[f]
            times_used = lines.count(f) - 1
            ln = get_line_number(f, lines)
            ln_f = "{}-> {} ({})".format(ln, f, times_used)
            if repeated_elements == "highlight" and repeated_definition > 1:
                print(colored(ln_f, "blue", attrs=["underline"]))
            elif repeated_elements == "highlight" and times_used == 0:
                print(colored(ln_f, "green"))
            else:
                print(colored(ln_f, "blue"))

parser = argparse.ArgumentParser(
    description="Print various quantities from .tex files")
parser.add_argument('--file', help="The tex file(s) to use", nargs=1)
parser.add_argument("-f", "--figures", action="store_true",
                    help="Print the figure names in the file")
parser.add_argument("-c", "--citations", action="store_true",
                    help="Print the citation keys in the file")
parser.add_argument("-l", "--label", const="all", nargs="?", type=str,
                    metavar="label_key",
                    help="""Print the \labels in the file. Optionally specify a
                    label_key such as `fig` in \label{fig: blah blah} to only
                    print the figure labels """)
parser.add_argument("-o", "--other", default=None,
                    help=("Print any arbitary latex element supplied after the"
                          " flag"))
parser.add_argument("-a", "--alphabetic", action="store_true",
                    help=("Print the results alphabetically"))
parser.add_argument("-r", "--recursive", action="store_true", default=False,
                    help=("Search for files recursively"))
parser.add_argument("-T", "--together", action="store_true",
                    help=("Print results for all files together"))
args = parser.parse_args()

# Getting the list of files and lines
files_list = []
lines_list = []
if args.file is None:
    # If no files supplied try and find some
    if args.recursive:
        possible_files = get_files_recursively()
    else:
        possible_files = glob.glob("*tex")

    for pf in possible_files:
        with open(pf) as f:
            lines = f.read()
            lines_list.append(lines)
            files_list.append(pf)
    if len(files_list) == 0:
        mssg = ("No files supplied and none found, are you in the right "
                "directory?")
        raise ValueError(colored(mssg, "red"))
else:
    for file in args.file:
        with open(file, "r") as f:
            lines_list.append(f.read())
            files_list.append(file)

if args.together:
    files_list = [" & ".join(files_list)]
    lines_list = [" ".join(lines_list)]

if args.figures:
    for lines, file in zip(lines_list, files_list):
        print_elements(lines, file, splitter="\\includegraphics",
                       alphabetic=args.alphabetic,
                       repeated_elements="highlight")

if args.citations:
    for lines, file in zip(lines_list, files_list):
        print_elements(lines, file, splitter="\\cite",
                       repeated_elements="remove",
                       alphabetic=args.alphabetic)

if args.label:
    for lines, file in zip(lines_list, files_list):
        print_elements(lines, file, "\\label", alphabetic=args.alphabetic,
                       containing=args.label, repeated_elements="highlight")
if args.other:
    for lines, file in zip(lines_list, files_list):
        print_elements(lines, file, args.other, args.alphabetic)
