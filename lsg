#!/usr/bin/python

import os
import subprocess
from termcolor import colored


class File:
    def __init__(self, path, deleted=False):
        self.path = path
        self.file_name = path.split("/")[-1]
        self.tracked = False
        self.modified = False
        self.deleted = deleted

        self.is_tracked()
        self.get_status()
        self.set_status_code()
        self.set_status_color()

    def is_tracked(self):
        try:
            _ = subprocess.check_output(
                "git ls-files {} --error-unmatch".format(self.path),
                stderr=subprocess.STDOUT, shell=True)
            self.tracked = True
        except subprocess.CalledProcessError:
            self.tracked = False

    def get_status(self):
        try:
            s = subprocess.check_output("git status {}".format(self.path),
                                        shell=True
                                        )
        except subprocess.CalledProcessError as e:
            print e
            if "Not a git repository" in e:
                raise ValueError("This is not a git repository")
            else:
                print e

        if "modified" in s:
            self.modified = True
        else:
            self.modified = False

    def set_status_code(self):
        if self.deleted:
            self.status_string = "DEL"
        else:
            codes = ['_', '*']
            self.status = [int(Bool) for Bool in [self.tracked, self.modified]]
            self.status_string = " ".join([codes[i] for i in self.status])

    def set_status_color(self):
        if self.status_string == "DEL":
            self.status_color = "magenta"
        else:
            status_matrix = [['red', ''], ['green', 'blue']]
            self.status_color = status_matrix[self.status[0]][self.status[1]]

    def print_status(self):
        string = "{} : {}".format(self.status_string, self.file_name)
        print colored(string, self.status_color)


class Directory:
    def __init__(self, path):
        self.path = path
        self.is_repository()
        self.get_files()
        self.print_dir_status()

    def is_repository(self):
        try:
            _ = subprocess.check_output(
                "git rev-parse --git-dir",
                stderr=subprocess.STDOUT,
                shell=True)
        except subprocess.CalledProcessError:
            raise ValueError("This is not a git repository")

    def get_files(self):
        path = self.path
        self.files = [File(os.path.join(path, f)) for f in os.listdir(path) if
                      os.path.isfile(os.path.join(path, f))]
        self.deleted_files = [File(os.path.join(path, f), deleted=True) for f
                              in subprocess.check_output(
                              "git ls-files -d", shell=True).split("\n")[:-1]]

    def print_dir_status(self):
        print("\nT M : File Name")
        colors = ['blue', 'green', 'red']
        for color in colors:
            for f in self.files:
                if f.status_color == color:
                    f.print_status()
        for f in self.deleted_files:
            f.print_status()

if __name__ == "__main__":
    path = "."
    Directory(path)
